//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./grammars/Language.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace analyzer {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class LanguageParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, INT=51, BOOL=52, FLOAT=53, 
		STRING=54, RUNE=55, Nil=56, ID=57, WS=58, LINE_COMMENT=59, BLOCK_COMMENT=60;
	public const int
		RULE_program = 0, RULE_dcl = 1, RULE_varDcl = 2, RULE_matrix = 3, RULE_slice = 4, 
		RULE_funcDcl = 5, RULE_structDcl = 6, RULE_params = 7, RULE_stmt = 8, 
		RULE_cases = 9, RULE_defaultSwitch = 10, RULE_forInit = 11, RULE_expr = 12, 
		RULE_call = 13, RULE_args = 14, RULE_props = 15, RULE_type = 16;
	public static readonly string[] ruleNames = {
		"program", "dcl", "varDcl", "matrix", "slice", "funcDcl", "structDcl", 
		"params", "stmt", "cases", "defaultSwitch", "forInit", "expr", "call", 
		"args", "props", "type"
	};

	private static readonly string[] _LiteralNames = {
		null, "'var'", "'='", "';'", "':='", "'['", "']'", "'{'", "'}'", "','", 
		"'func'", "'('", "')'", "'type'", "'struct'", "'if'", "'else'", "'switch'", 
		"'for'", "'range'", "'break'", "'continue'", "'fmt.Println'", "'return'", 
		"'case'", "':'", "'default'", "'-'", "'*'", "'/'", "'%'", "'+'", "'>'", 
		"'<'", "'>='", "'<='", "'=='", "'!='", "'&&'", "'||'", "'!'", "'+='", 
		"'-='", "'++'", "'--'", "'.'", "'int'", "'float64'", "'string'", "'bool'", 
		"'rune'", null, null, null, null, null, "'nil'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, "INT", "BOOL", "FLOAT", "STRING", "RUNE", "Nil", "ID", 
		"WS", "LINE_COMMENT", "BLOCK_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Language.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static LanguageParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LanguageParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LanguageParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DclContext[] dcl() {
			return GetRuleContexts<DclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DclContext dcl(int i) {
			return GetRuleContext<DclContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 37;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 285979676000038050L) != 0)) {
				{
				{
				State = 34;
				dcl();
				}
				}
				State = 39;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDclContext varDcl() {
			return GetRuleContext<VarDclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncDclContext funcDcl() {
			return GetRuleContext<FuncDclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructDclContext structDcl() {
			return GetRuleContext<StructDclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SliceContext slice() {
			return GetRuleContext<SliceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MatrixContext matrix() {
			return GetRuleContext<MatrixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt() {
			return GetRuleContext<StmtContext>(0);
		}
		public DclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dcl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DclContext dcl() {
		DclContext _localctx = new DclContext(Context, State);
		EnterRule(_localctx, 2, RULE_dcl);
		try {
			State = 46;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 40;
				varDcl();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 41;
				funcDcl();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 42;
				structDcl();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 43;
				slice();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 44;
				matrix();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 45;
				stmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public VarDclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDcl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDclContext varDcl() {
		VarDclContext _localctx = new VarDclContext(Context, State);
		EnterRule(_localctx, 4, RULE_varDcl);
		try {
			State = 73;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 48;
				Match(T__0);
				State = 49;
				Match(ID);
				State = 50;
				type();
				State = 51;
				Match(T__1);
				State = 52;
				expr(0);
				State = 54;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
				case 1:
					{
					State = 53;
					Match(T__2);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 56;
				Match(T__0);
				State = 57;
				Match(ID);
				State = 58;
				type();
				State = 60;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
				case 1:
					{
					State = 59;
					Match(T__2);
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 62;
				Match(ID);
				State = 63;
				Match(T__3);
				State = 64;
				expr(0);
				State = 66;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
				case 1:
					{
					State = 65;
					Match(T__2);
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 68;
				Match(ID);
				State = 69;
				type();
				State = 71;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
				case 1:
					{
					State = 70;
					Match(T__2);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MatrixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgsContext[] args() {
			return GetRuleContexts<ArgsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgsContext args(int i) {
			return GetRuleContext<ArgsContext>(i);
		}
		public MatrixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_matrix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatrix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MatrixContext matrix() {
		MatrixContext _localctx = new MatrixContext(Context, State);
		EnterRule(_localctx, 6, RULE_matrix);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 75;
			Match(ID);
			State = 76;
			Match(T__3);
			State = 77;
			Match(T__4);
			State = 78;
			Match(T__5);
			State = 79;
			Match(T__4);
			State = 80;
			Match(T__5);
			State = 81;
			type();
			State = 82;
			Match(T__6);
			State = 83;
			Match(T__6);
			State = 84;
			args();
			State = 85;
			Match(T__7);
			State = 86;
			Match(T__8);
			State = 94;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__6) {
				{
				{
				State = 87;
				Match(T__6);
				State = 88;
				args();
				State = 89;
				Match(T__7);
				State = 90;
				Match(T__8);
				}
				}
				State = 96;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 97;
			Match(T__7);
			State = 99;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2) {
				{
				State = 98;
				Match(T__2);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SliceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public SliceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_slice; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSlice(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SliceContext slice() {
		SliceContext _localctx = new SliceContext(Context, State);
		EnterRule(_localctx, 8, RULE_slice);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101;
			Match(T__0);
			State = 102;
			Match(ID);
			State = 103;
			Match(T__4);
			State = 104;
			Match(T__5);
			State = 105;
			type();
			State = 107;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2) {
				{
				State = 106;
				Match(T__2);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncDclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParamsContext @params() {
			return GetRuleContext<ParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DclContext[] dcl() {
			return GetRuleContexts<DclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DclContext dcl(int i) {
			return GetRuleContext<DclContext>(i);
		}
		public FuncDclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcDcl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncDclContext funcDcl() {
		FuncDclContext _localctx = new FuncDclContext(Context, State);
		EnterRule(_localctx, 10, RULE_funcDcl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			Match(T__9);
			State = 110;
			Match(ID);
			State = 111;
			Match(T__10);
			State = 113;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID) {
				{
				State = 112;
				@params();
				}
			}

			State = 115;
			Match(T__11);
			State = 117;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2181431069507584L) != 0)) {
				{
				State = 116;
				type();
				}
			}

			State = 119;
			Match(T__6);
			State = 123;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 285979676000038050L) != 0)) {
				{
				{
				State = 120;
				dcl();
				}
				}
				State = 125;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 126;
			Match(T__7);
			State = 128;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2) {
				{
				State = 127;
				Match(T__2);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarDclContext[] varDcl() {
			return GetRuleContexts<VarDclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDclContext varDcl(int i) {
			return GetRuleContext<VarDclContext>(i);
		}
		public StructDclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDcl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructDclContext structDcl() {
		StructDclContext _localctx = new StructDclContext(Context, State);
		EnterRule(_localctx, 12, RULE_structDcl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 130;
			Match(T__12);
			State = 131;
			Match(ID);
			State = 132;
			Match(T__13);
			State = 133;
			Match(T__6);
			State = 137;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0 || _la==ID) {
				{
				{
				State = 134;
				varDcl();
				}
				}
				State = 139;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 140;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(LanguageParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(LanguageParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_params; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamsContext @params() {
		ParamsContext _localctx = new ParamsContext(Context, State);
		EnterRule(_localctx, 14, RULE_params);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142;
			Match(ID);
			State = 143;
			type();
			State = 149;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__8) {
				{
				{
				State = 144;
				Match(T__8);
				State = 145;
				Match(ID);
				State = 146;
				type();
				}
				}
				State = 151;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtContext : ParserRuleContext {
		public StmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt; } }
	 
		public StmtContext() { }
		public virtual void CopyFrom(StmtContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ContinueStmtContext : StmtContext {
		public ContinueStmtContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrintContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public PrintContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SwitchStmtContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CasesContext[] cases() {
			return GetRuleContexts<CasesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CasesContext cases(int i) {
			return GetRuleContext<CasesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultSwitchContext defaultSwitch() {
			return GetRuleContext<DefaultSwitchContext>(0);
		}
		public SwitchStmtContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfStmtContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public IfStmtContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprStmtContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ExprStmtContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BreakStmtContext : StmtContext {
		public BreakStmtContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BlockStmtContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public DclContext[] dcl() {
			return GetRuleContexts<DclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DclContext dcl(int i) {
			return GetRuleContext<DclContext>(i);
		}
		public BlockStmtContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForCondStmtContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt() {
			return GetRuleContext<StmtContext>(0);
		}
		public ForCondStmtContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForCondStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForRangeContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(LanguageParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(LanguageParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt() {
			return GetRuleContext<StmtContext>(0);
		}
		public ForRangeContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForRange(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForStmtContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ForInitContext forInit() {
			return GetRuleContext<ForInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt() {
			return GetRuleContext<StmtContext>(0);
		}
		public ForStmtContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReturnStmtContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ReturnStmtContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtContext stmt() {
		StmtContext _localctx = new StmtContext(Context, State);
		EnterRule(_localctx, 16, RULE_stmt);
		int _la;
		try {
			State = 224;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				_localctx = new ExprStmtContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 152;
				expr(0);
				}
				break;
			case 2:
				_localctx = new BlockStmtContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 153;
				Match(T__6);
				State = 157;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 285979676000038050L) != 0)) {
					{
					{
					State = 154;
					dcl();
					}
					}
					State = 159;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 160;
				Match(T__7);
				}
				break;
			case 3:
				_localctx = new IfStmtContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 161;
				Match(T__14);
				State = 162;
				expr(0);
				State = 163;
				stmt();
				State = 166;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
				case 1:
					{
					State = 164;
					Match(T__15);
					State = 165;
					stmt();
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new SwitchStmtContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 168;
				Match(T__16);
				State = 169;
				expr(0);
				State = 170;
				Match(T__6);
				State = 174;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__23) {
					{
					{
					State = 171;
					cases();
					}
					}
					State = 176;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 178;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__25) {
					{
					State = 177;
					defaultSwitch();
					}
				}

				State = 180;
				Match(T__7);
				}
				break;
			case 5:
				_localctx = new ForStmtContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 182;
				Match(T__17);
				State = 183;
				forInit();
				State = 184;
				expr(0);
				State = 185;
				Match(T__2);
				State = 186;
				expr(0);
				State = 187;
				stmt();
				}
				break;
			case 6:
				_localctx = new ForCondStmtContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 189;
				Match(T__17);
				State = 190;
				expr(0);
				State = 191;
				stmt();
				}
				break;
			case 7:
				_localctx = new ForRangeContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 193;
				Match(T__17);
				State = 194;
				Match(ID);
				State = 195;
				Match(T__8);
				State = 196;
				Match(ID);
				State = 197;
				Match(T__3);
				State = 198;
				Match(T__18);
				State = 199;
				expr(0);
				State = 200;
				stmt();
				}
				break;
			case 8:
				_localctx = new BreakStmtContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 202;
				Match(T__19);
				State = 204;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2) {
					{
					State = 203;
					Match(T__2);
					}
				}

				}
				break;
			case 9:
				_localctx = new ContinueStmtContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 206;
				Match(T__20);
				State = 208;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2) {
					{
					State = 207;
					Match(T__2);
					}
				}

				}
				break;
			case 10:
				_localctx = new PrintContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 210;
				Match(T__21);
				State = 211;
				Match(T__10);
				State = 212;
				expr(0);
				State = 213;
				Match(T__11);
				State = 215;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2) {
					{
					State = 214;
					Match(T__2);
					}
				}

				}
				break;
			case 11:
				_localctx = new ReturnStmtContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 217;
				Match(T__22);
				State = 219;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
				case 1:
					{
					State = 218;
					expr(0);
					}
					break;
				}
				State = 222;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2) {
					{
					State = 221;
					Match(T__2);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CasesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public CasesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cases; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCases(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CasesContext cases() {
		CasesContext _localctx = new CasesContext(Context, State);
		EnterRule(_localctx, 18, RULE_cases);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 226;
			Match(T__23);
			State = 227;
			expr(0);
			State = 228;
			Match(T__24);
			State = 232;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 285979676000028832L) != 0)) {
				{
				{
				State = 229;
				stmt();
				}
				}
				State = 234;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultSwitchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public DefaultSwitchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultSwitch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultSwitch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultSwitchContext defaultSwitch() {
		DefaultSwitchContext _localctx = new DefaultSwitchContext(Context, State);
		EnterRule(_localctx, 20, RULE_defaultSwitch);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 235;
			Match(T__25);
			State = 236;
			Match(T__24);
			State = 240;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 285979676000028832L) != 0)) {
				{
				{
				State = 237;
				stmt();
				}
				}
				State = 242;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarDclContext varDcl() {
			return GetRuleContext<VarDclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ForInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForInitContext forInit() {
		ForInitContext _localctx = new ForInitContext(Context, State);
		EnterRule(_localctx, 22, RULE_forInit);
		try {
			State = 249;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 243;
				varDcl();
				State = 244;
				Match(T__2);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 246;
				expr(0);
				State = 247;
				Match(T__2);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MatrixIndexContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public MatrixIndexContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatrixIndex(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CalleeContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallContext[] call() {
			return GetRuleContexts<CallContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallContext call(int i) {
			return GetRuleContext<CallContext>(i);
		}
		public CalleeContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallee(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SlicesContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		public SlicesContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSlices(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DecrementContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		public DecrementContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecrement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IncDecAssignContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public IncDecAssignContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncDecAssign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddSubContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public AddSubContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddSub(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParensContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ParensContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParens(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InStructContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropsContext props() {
			return GetRuleContext<PropsContext>(0);
		}
		public InStructContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInStruct(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RelationalContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public RelationalContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelational(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public LogicalContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogical(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IndexContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public IndexContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(LanguageParser.STRING, 0); }
		public StringContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(LanguageParser.INT, 0); }
		public IntContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FloatContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(LanguageParser.FLOAT, 0); }
		public FloatContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public NotContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MulDivModContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public MulDivModContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulDivMod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		public IdentifierContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IncrementContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		public IncrementContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncrement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public AssignContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NegateContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public NegateContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public EqualityContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquality(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(LanguageParser.BOOL, 0); }
		public BooleanContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RuneContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RUNE() { return GetToken(LanguageParser.RUNE, 0); }
		public RuneContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRune(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NillContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Nil() { return GetToken(LanguageParser.Nil, 0); }
		public NillContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNill(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 24;
		EnterRecursionRule(_localctx, 24, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 299;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				{
				_localctx = new NegateContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 252;
				Match(T__26);
				State = 253;
				expr(24);
				}
				break;
			case 2:
				{
				_localctx = new NotContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 254;
				Match(T__39);
				State = 255;
				expr(17);
				}
				break;
			case 3:
				{
				_localctx = new IncDecAssignContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 256;
				Match(ID);
				State = 257;
				((IncDecAssignContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==T__40 || _la==T__41) ) {
					((IncDecAssignContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 258;
				expr(16);
				}
				break;
			case 4:
				{
				_localctx = new SlicesContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 259;
				Match(T__4);
				State = 260;
				Match(T__5);
				State = 261;
				type();
				State = 262;
				Match(T__6);
				State = 263;
				args();
				State = 264;
				Match(T__7);
				}
				break;
			case 5:
				{
				_localctx = new IndexContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 266;
				Match(ID);
				State = 267;
				Match(T__4);
				State = 268;
				expr(0);
				State = 269;
				Match(T__5);
				}
				break;
			case 6:
				{
				_localctx = new MatrixIndexContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 271;
				Match(ID);
				State = 272;
				Match(T__4);
				State = 273;
				expr(0);
				State = 274;
				Match(T__5);
				State = 275;
				Match(T__4);
				State = 276;
				expr(0);
				State = 277;
				Match(T__5);
				}
				break;
			case 7:
				{
				_localctx = new IncrementContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 279;
				Match(ID);
				State = 280;
				Match(T__42);
				}
				break;
			case 8:
				{
				_localctx = new DecrementContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 281;
				Match(ID);
				State = 282;
				Match(T__43);
				}
				break;
			case 9:
				{
				_localctx = new InStructContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 283;
				Match(ID);
				State = 284;
				Match(T__6);
				State = 285;
				props();
				State = 286;
				Match(T__7);
				}
				break;
			case 10:
				{
				_localctx = new BooleanContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 288;
				Match(BOOL);
				}
				break;
			case 11:
				{
				_localctx = new FloatContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 289;
				Match(FLOAT);
				}
				break;
			case 12:
				{
				_localctx = new StringContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 290;
				Match(STRING);
				}
				break;
			case 13:
				{
				_localctx = new IntContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 291;
				Match(INT);
				}
				break;
			case 14:
				{
				_localctx = new IdentifierContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 292;
				Match(ID);
				}
				break;
			case 15:
				{
				_localctx = new NillContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 293;
				Match(Nil);
				}
				break;
			case 16:
				{
				_localctx = new RuneContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 294;
				Match(RUNE);
				}
				break;
			case 17:
				{
				_localctx = new ParensContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 295;
				Match(T__10);
				State = 296;
				expr(0);
				State = 297;
				Match(T__11);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 330;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 328;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
					case 1:
						{
						_localctx = new MulDivModContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 301;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 302;
						((MulDivModContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1879048192L) != 0)) ) {
							((MulDivModContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 303;
						expr(23);
						}
						break;
					case 2:
						{
						_localctx = new AddSubContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 304;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 305;
						((AddSubContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__26 || _la==T__30) ) {
							((AddSubContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 306;
						expr(22);
						}
						break;
					case 3:
						{
						_localctx = new RelationalContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 307;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 308;
						((RelationalContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 64424509440L) != 0)) ) {
							((RelationalContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 309;
						expr(21);
						}
						break;
					case 4:
						{
						_localctx = new EqualityContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 310;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 311;
						((EqualityContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__35 || _la==T__36) ) {
							((EqualityContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 312;
						expr(20);
						}
						break;
					case 5:
						{
						_localctx = new LogicalContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 313;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 314;
						((LogicalContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__37 || _la==T__38) ) {
							((LogicalContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 315;
						expr(19);
						}
						break;
					case 6:
						{
						_localctx = new CalleeContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 316;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 318;
						ErrorHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 317;
								call();
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 320;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
						}
						break;
					case 7:
						{
						_localctx = new AssignContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 322;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 323;
						Match(T__1);
						State = 324;
						expr(0);
						State = 326;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
						case 1:
							{
							State = 325;
							Match(T__2);
							}
							break;
						}
						}
						break;
					}
					} 
				}
				State = 332;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CallContext : ParserRuleContext {
		public CallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call; } }
	 
		public CallContext() { }
		public virtual void CopyFrom(CallContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FuncCallContext : CallContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		public FuncCallContext(CallContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GetContext : CallContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		public GetContext(CallContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallContext call() {
		CallContext _localctx = new CallContext(Context, State);
		EnterRule(_localctx, 26, RULE_call);
		int _la;
		try {
			State = 340;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__10:
				_localctx = new FuncCallContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 333;
				Match(T__10);
				State = 335;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 285979675983874080L) != 0)) {
					{
					State = 334;
					args();
					}
				}

				State = 337;
				Match(T__11);
				}
				break;
			case T__44:
				_localctx = new GetContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 338;
				Match(T__44);
				State = 339;
				Match(ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_args; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgsContext args() {
		ArgsContext _localctx = new ArgsContext(Context, State);
		EnterRule(_localctx, 28, RULE_args);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 342;
			expr(0);
			State = 347;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__8) {
				{
				{
				State = 343;
				Match(T__8);
				State = 344;
				expr(0);
				}
				}
				State = 349;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(LanguageParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(LanguageParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public PropsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_props; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProps(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropsContext props() {
		PropsContext _localctx = new PropsContext(Context, State);
		EnterRule(_localctx, 30, RULE_props);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 350;
			Match(ID);
			State = 351;
			Match(T__24);
			State = 352;
			expr(0);
			State = 353;
			Match(T__8);
			State = 361;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ID) {
				{
				{
				State = 354;
				Match(ID);
				State = 355;
				Match(T__24);
				State = 356;
				expr(0);
				State = 357;
				Match(T__8);
				}
				}
				State = 363;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 32, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 364;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 2181431069507584L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 12: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 22);
		case 1: return Precpred(Context, 21);
		case 2: return Precpred(Context, 20);
		case 3: return Precpred(Context, 19);
		case 4: return Precpred(Context, 18);
		case 5: return Precpred(Context, 23);
		case 6: return Precpred(Context, 15);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,60,367,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,1,0,5,0,36,8,0,10,0,12,0,39,9,0,1,1,1,1,1,1,1,1,1,
		1,1,1,3,1,47,8,1,1,2,1,2,1,2,1,2,1,2,1,2,3,2,55,8,2,1,2,1,2,1,2,1,2,3,
		2,61,8,2,1,2,1,2,1,2,1,2,3,2,67,8,2,1,2,1,2,1,2,3,2,72,8,2,3,2,74,8,2,
		1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,5,
		3,93,8,3,10,3,12,3,96,9,3,1,3,1,3,3,3,100,8,3,1,4,1,4,1,4,1,4,1,4,1,4,
		3,4,108,8,4,1,5,1,5,1,5,1,5,3,5,114,8,5,1,5,1,5,3,5,118,8,5,1,5,1,5,5,
		5,122,8,5,10,5,12,5,125,9,5,1,5,1,5,3,5,129,8,5,1,6,1,6,1,6,1,6,1,6,5,
		6,136,8,6,10,6,12,6,139,9,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,5,7,148,8,7,10,
		7,12,7,151,9,7,1,8,1,8,1,8,5,8,156,8,8,10,8,12,8,159,9,8,1,8,1,8,1,8,1,
		8,1,8,1,8,3,8,167,8,8,1,8,1,8,1,8,1,8,5,8,173,8,8,10,8,12,8,176,9,8,1,
		8,3,8,179,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
		1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,205,8,8,1,8,1,8,3,8,209,8,
		8,1,8,1,8,1,8,1,8,1,8,3,8,216,8,8,1,8,1,8,3,8,220,8,8,1,8,3,8,223,8,8,
		3,8,225,8,8,1,9,1,9,1,9,1,9,5,9,231,8,9,10,9,12,9,234,9,9,1,10,1,10,1,
		10,5,10,239,8,10,10,10,12,10,242,9,10,1,11,1,11,1,11,1,11,1,11,1,11,3,
		11,250,8,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
		1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
		1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
		1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,300,8,12,1,12,1,12,1,12,1,
		12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,4,
		12,319,8,12,11,12,12,12,320,1,12,1,12,1,12,1,12,3,12,327,8,12,5,12,329,
		8,12,10,12,12,12,332,9,12,1,13,1,13,3,13,336,8,13,1,13,1,13,1,13,3,13,
		341,8,13,1,14,1,14,1,14,5,14,346,8,14,10,14,12,14,349,9,14,1,15,1,15,1,
		15,1,15,1,15,1,15,1,15,1,15,1,15,5,15,360,8,15,10,15,12,15,363,9,15,1,
		16,1,16,1,16,0,1,24,17,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,0,
		7,1,0,41,42,1,0,28,30,2,0,27,27,31,31,1,0,32,35,1,0,36,37,1,0,38,39,1,
		0,46,50,422,0,37,1,0,0,0,2,46,1,0,0,0,4,73,1,0,0,0,6,75,1,0,0,0,8,101,
		1,0,0,0,10,109,1,0,0,0,12,130,1,0,0,0,14,142,1,0,0,0,16,224,1,0,0,0,18,
		226,1,0,0,0,20,235,1,0,0,0,22,249,1,0,0,0,24,299,1,0,0,0,26,340,1,0,0,
		0,28,342,1,0,0,0,30,350,1,0,0,0,32,364,1,0,0,0,34,36,3,2,1,0,35,34,1,0,
		0,0,36,39,1,0,0,0,37,35,1,0,0,0,37,38,1,0,0,0,38,1,1,0,0,0,39,37,1,0,0,
		0,40,47,3,4,2,0,41,47,3,10,5,0,42,47,3,12,6,0,43,47,3,8,4,0,44,47,3,6,
		3,0,45,47,3,16,8,0,46,40,1,0,0,0,46,41,1,0,0,0,46,42,1,0,0,0,46,43,1,0,
		0,0,46,44,1,0,0,0,46,45,1,0,0,0,47,3,1,0,0,0,48,49,5,1,0,0,49,50,5,57,
		0,0,50,51,3,32,16,0,51,52,5,2,0,0,52,54,3,24,12,0,53,55,5,3,0,0,54,53,
		1,0,0,0,54,55,1,0,0,0,55,74,1,0,0,0,56,57,5,1,0,0,57,58,5,57,0,0,58,60,
		3,32,16,0,59,61,5,3,0,0,60,59,1,0,0,0,60,61,1,0,0,0,61,74,1,0,0,0,62,63,
		5,57,0,0,63,64,5,4,0,0,64,66,3,24,12,0,65,67,5,3,0,0,66,65,1,0,0,0,66,
		67,1,0,0,0,67,74,1,0,0,0,68,69,5,57,0,0,69,71,3,32,16,0,70,72,5,3,0,0,
		71,70,1,0,0,0,71,72,1,0,0,0,72,74,1,0,0,0,73,48,1,0,0,0,73,56,1,0,0,0,
		73,62,1,0,0,0,73,68,1,0,0,0,74,5,1,0,0,0,75,76,5,57,0,0,76,77,5,4,0,0,
		77,78,5,5,0,0,78,79,5,6,0,0,79,80,5,5,0,0,80,81,5,6,0,0,81,82,3,32,16,
		0,82,83,5,7,0,0,83,84,5,7,0,0,84,85,3,28,14,0,85,86,5,8,0,0,86,94,5,9,
		0,0,87,88,5,7,0,0,88,89,3,28,14,0,89,90,5,8,0,0,90,91,5,9,0,0,91,93,1,
		0,0,0,92,87,1,0,0,0,93,96,1,0,0,0,94,92,1,0,0,0,94,95,1,0,0,0,95,97,1,
		0,0,0,96,94,1,0,0,0,97,99,5,8,0,0,98,100,5,3,0,0,99,98,1,0,0,0,99,100,
		1,0,0,0,100,7,1,0,0,0,101,102,5,1,0,0,102,103,5,57,0,0,103,104,5,5,0,0,
		104,105,5,6,0,0,105,107,3,32,16,0,106,108,5,3,0,0,107,106,1,0,0,0,107,
		108,1,0,0,0,108,9,1,0,0,0,109,110,5,10,0,0,110,111,5,57,0,0,111,113,5,
		11,0,0,112,114,3,14,7,0,113,112,1,0,0,0,113,114,1,0,0,0,114,115,1,0,0,
		0,115,117,5,12,0,0,116,118,3,32,16,0,117,116,1,0,0,0,117,118,1,0,0,0,118,
		119,1,0,0,0,119,123,5,7,0,0,120,122,3,2,1,0,121,120,1,0,0,0,122,125,1,
		0,0,0,123,121,1,0,0,0,123,124,1,0,0,0,124,126,1,0,0,0,125,123,1,0,0,0,
		126,128,5,8,0,0,127,129,5,3,0,0,128,127,1,0,0,0,128,129,1,0,0,0,129,11,
		1,0,0,0,130,131,5,13,0,0,131,132,5,57,0,0,132,133,5,14,0,0,133,137,5,7,
		0,0,134,136,3,4,2,0,135,134,1,0,0,0,136,139,1,0,0,0,137,135,1,0,0,0,137,
		138,1,0,0,0,138,140,1,0,0,0,139,137,1,0,0,0,140,141,5,8,0,0,141,13,1,0,
		0,0,142,143,5,57,0,0,143,149,3,32,16,0,144,145,5,9,0,0,145,146,5,57,0,
		0,146,148,3,32,16,0,147,144,1,0,0,0,148,151,1,0,0,0,149,147,1,0,0,0,149,
		150,1,0,0,0,150,15,1,0,0,0,151,149,1,0,0,0,152,225,3,24,12,0,153,157,5,
		7,0,0,154,156,3,2,1,0,155,154,1,0,0,0,156,159,1,0,0,0,157,155,1,0,0,0,
		157,158,1,0,0,0,158,160,1,0,0,0,159,157,1,0,0,0,160,225,5,8,0,0,161,162,
		5,15,0,0,162,163,3,24,12,0,163,166,3,16,8,0,164,165,5,16,0,0,165,167,3,
		16,8,0,166,164,1,0,0,0,166,167,1,0,0,0,167,225,1,0,0,0,168,169,5,17,0,
		0,169,170,3,24,12,0,170,174,5,7,0,0,171,173,3,18,9,0,172,171,1,0,0,0,173,
		176,1,0,0,0,174,172,1,0,0,0,174,175,1,0,0,0,175,178,1,0,0,0,176,174,1,
		0,0,0,177,179,3,20,10,0,178,177,1,0,0,0,178,179,1,0,0,0,179,180,1,0,0,
		0,180,181,5,8,0,0,181,225,1,0,0,0,182,183,5,18,0,0,183,184,3,22,11,0,184,
		185,3,24,12,0,185,186,5,3,0,0,186,187,3,24,12,0,187,188,3,16,8,0,188,225,
		1,0,0,0,189,190,5,18,0,0,190,191,3,24,12,0,191,192,3,16,8,0,192,225,1,
		0,0,0,193,194,5,18,0,0,194,195,5,57,0,0,195,196,5,9,0,0,196,197,5,57,0,
		0,197,198,5,4,0,0,198,199,5,19,0,0,199,200,3,24,12,0,200,201,3,16,8,0,
		201,225,1,0,0,0,202,204,5,20,0,0,203,205,5,3,0,0,204,203,1,0,0,0,204,205,
		1,0,0,0,205,225,1,0,0,0,206,208,5,21,0,0,207,209,5,3,0,0,208,207,1,0,0,
		0,208,209,1,0,0,0,209,225,1,0,0,0,210,211,5,22,0,0,211,212,5,11,0,0,212,
		213,3,24,12,0,213,215,5,12,0,0,214,216,5,3,0,0,215,214,1,0,0,0,215,216,
		1,0,0,0,216,225,1,0,0,0,217,219,5,23,0,0,218,220,3,24,12,0,219,218,1,0,
		0,0,219,220,1,0,0,0,220,222,1,0,0,0,221,223,5,3,0,0,222,221,1,0,0,0,222,
		223,1,0,0,0,223,225,1,0,0,0,224,152,1,0,0,0,224,153,1,0,0,0,224,161,1,
		0,0,0,224,168,1,0,0,0,224,182,1,0,0,0,224,189,1,0,0,0,224,193,1,0,0,0,
		224,202,1,0,0,0,224,206,1,0,0,0,224,210,1,0,0,0,224,217,1,0,0,0,225,17,
		1,0,0,0,226,227,5,24,0,0,227,228,3,24,12,0,228,232,5,25,0,0,229,231,3,
		16,8,0,230,229,1,0,0,0,231,234,1,0,0,0,232,230,1,0,0,0,232,233,1,0,0,0,
		233,19,1,0,0,0,234,232,1,0,0,0,235,236,5,26,0,0,236,240,5,25,0,0,237,239,
		3,16,8,0,238,237,1,0,0,0,239,242,1,0,0,0,240,238,1,0,0,0,240,241,1,0,0,
		0,241,21,1,0,0,0,242,240,1,0,0,0,243,244,3,4,2,0,244,245,5,3,0,0,245,250,
		1,0,0,0,246,247,3,24,12,0,247,248,5,3,0,0,248,250,1,0,0,0,249,243,1,0,
		0,0,249,246,1,0,0,0,250,23,1,0,0,0,251,252,6,12,-1,0,252,253,5,27,0,0,
		253,300,3,24,12,24,254,255,5,40,0,0,255,300,3,24,12,17,256,257,5,57,0,
		0,257,258,7,0,0,0,258,300,3,24,12,16,259,260,5,5,0,0,260,261,5,6,0,0,261,
		262,3,32,16,0,262,263,5,7,0,0,263,264,3,28,14,0,264,265,5,8,0,0,265,300,
		1,0,0,0,266,267,5,57,0,0,267,268,5,5,0,0,268,269,3,24,12,0,269,270,5,6,
		0,0,270,300,1,0,0,0,271,272,5,57,0,0,272,273,5,5,0,0,273,274,3,24,12,0,
		274,275,5,6,0,0,275,276,5,5,0,0,276,277,3,24,12,0,277,278,5,6,0,0,278,
		300,1,0,0,0,279,280,5,57,0,0,280,300,5,43,0,0,281,282,5,57,0,0,282,300,
		5,44,0,0,283,284,5,57,0,0,284,285,5,7,0,0,285,286,3,30,15,0,286,287,5,
		8,0,0,287,300,1,0,0,0,288,300,5,52,0,0,289,300,5,53,0,0,290,300,5,54,0,
		0,291,300,5,51,0,0,292,300,5,57,0,0,293,300,5,56,0,0,294,300,5,55,0,0,
		295,296,5,11,0,0,296,297,3,24,12,0,297,298,5,12,0,0,298,300,1,0,0,0,299,
		251,1,0,0,0,299,254,1,0,0,0,299,256,1,0,0,0,299,259,1,0,0,0,299,266,1,
		0,0,0,299,271,1,0,0,0,299,279,1,0,0,0,299,281,1,0,0,0,299,283,1,0,0,0,
		299,288,1,0,0,0,299,289,1,0,0,0,299,290,1,0,0,0,299,291,1,0,0,0,299,292,
		1,0,0,0,299,293,1,0,0,0,299,294,1,0,0,0,299,295,1,0,0,0,300,330,1,0,0,
		0,301,302,10,22,0,0,302,303,7,1,0,0,303,329,3,24,12,23,304,305,10,21,0,
		0,305,306,7,2,0,0,306,329,3,24,12,22,307,308,10,20,0,0,308,309,7,3,0,0,
		309,329,3,24,12,21,310,311,10,19,0,0,311,312,7,4,0,0,312,329,3,24,12,20,
		313,314,10,18,0,0,314,315,7,5,0,0,315,329,3,24,12,19,316,318,10,23,0,0,
		317,319,3,26,13,0,318,317,1,0,0,0,319,320,1,0,0,0,320,318,1,0,0,0,320,
		321,1,0,0,0,321,329,1,0,0,0,322,323,10,15,0,0,323,324,5,2,0,0,324,326,
		3,24,12,0,325,327,5,3,0,0,326,325,1,0,0,0,326,327,1,0,0,0,327,329,1,0,
		0,0,328,301,1,0,0,0,328,304,1,0,0,0,328,307,1,0,0,0,328,310,1,0,0,0,328,
		313,1,0,0,0,328,316,1,0,0,0,328,322,1,0,0,0,329,332,1,0,0,0,330,328,1,
		0,0,0,330,331,1,0,0,0,331,25,1,0,0,0,332,330,1,0,0,0,333,335,5,11,0,0,
		334,336,3,28,14,0,335,334,1,0,0,0,335,336,1,0,0,0,336,337,1,0,0,0,337,
		341,5,12,0,0,338,339,5,45,0,0,339,341,5,57,0,0,340,333,1,0,0,0,340,338,
		1,0,0,0,341,27,1,0,0,0,342,347,3,24,12,0,343,344,5,9,0,0,344,346,3,24,
		12,0,345,343,1,0,0,0,346,349,1,0,0,0,347,345,1,0,0,0,347,348,1,0,0,0,348,
		29,1,0,0,0,349,347,1,0,0,0,350,351,5,57,0,0,351,352,5,25,0,0,352,353,3,
		24,12,0,353,361,5,9,0,0,354,355,5,57,0,0,355,356,5,25,0,0,356,357,3,24,
		12,0,357,358,5,9,0,0,358,360,1,0,0,0,359,354,1,0,0,0,360,363,1,0,0,0,361,
		359,1,0,0,0,361,362,1,0,0,0,362,31,1,0,0,0,363,361,1,0,0,0,364,365,7,6,
		0,0,365,33,1,0,0,0,38,37,46,54,60,66,71,73,94,99,107,113,117,123,128,137,
		149,157,166,174,178,204,208,215,219,222,224,232,240,249,299,320,326,328,
		330,335,340,347,361
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace analyzer
